{"version":3,"mappings":"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","names":["params","message","targetSelectors","el","infiniteScrollCss","InfiniteScroll","constructor","hostRef","registerInstance","ionInfinite","createEvent","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","contentEl","findClosestIonContent","_this","printIonContentErrorMsg","getScrollElement","writeTask","clientHeight","disconnectedCallback","undefined","complete","_this2","prev","requestAnimationFrame","readTask","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","getIonMode","h","Host","class","getElement","style","infiniteScrollContentIosCss","infiniteScrollContentMdCss","InfiniteScrollContent","customHTMLEnabled","config","ENABLE_HTML_CONTENT_DEFAULT","componentDidLoad","loadingSpinner","renderLoadingText","loadingText","innerHTML","sanitizeDOMString","name","ios","md"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/index-c4b11676.js","webpack:///node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Logs a warning to the console with an Ionic prefix\n * to indicate the library that is warning the developer.\n *\n * @param message - The string message to be logged to the console.\n */\nconst printIonWarning = (message, ...params) => {\n  return console.warn(`[Ionic Warning]: ${message}`, ...params);\n};\n/*\n * Logs an error to the console with an Ionic prefix\n * to indicate the library that is warning the developer.\n *\n * @param message - The string message to be logged to the console.\n * @param params - Additional arguments to supply to the console.error.\n */\nconst printIonError = (message, ...params) => {\n  return console.error(`[Ionic Error]: ${message}`, ...params);\n};\n/**\n * Prints an error informing developers that an implementation requires an element to be used\n * within a specific selector.\n *\n * @param el The web component element this is requiring the element.\n * @param targetSelectors The selector or selectors that were not found.\n */\nconst printRequiredElementError = (el, ...targetSelectors) => {\n  return console.error(`<${el.tagName.toLowerCase()}> must be used inside ${targetSelectors.join(' or ')}.`);\n};\n\nexport { printRequiredElementError as a, printIonError as b, printIonWarning as p };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-8e692445.js';\nimport { b as getIonMode, c as config } from './ionic-global-c74e4951.js';\nimport { f as findClosestIonContent, p as printIonContentErrorMsg, g as getScrollElement } from './index-e6d1a8be.js';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config-d4f612d2.js';\nimport './helpers-3b390e48.js';\nimport './index-c4b11676.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nconst InfiniteScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n    this.position = 'bottom';\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n      const infiniteHeight = this.el.offsetHeight;\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;\n      const distanceFromInfinite = this.position === 'bottom'\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n        : scrollTop - infiniteHeight - threshold;\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      }\n      else {\n        this.didFire = false;\n      }\n      return 4;\n    };\n  }\n  thresholdChanged() {\n    const val = this.threshold;\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = parseFloat(val) / 100;\n    }\n    else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n  disabledChanged() {\n    const disabled = this.disabled;\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n    this.enableScrollEvents(!disabled);\n  }\n  async connectedCallback() {\n    const contentEl = findClosestIonContent(this.el);\n    if (!contentEl) {\n      printIonContentErrorMsg(this.el);\n      return;\n    }\n    this.scrollEl = await getScrollElement(contentEl);\n    this.thresholdChanged();\n    this.disabledChanged();\n    if (this.position === 'top') {\n      writeTask(() => {\n        if (this.scrollEl) {\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n        }\n      });\n    }\n  }\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n  async complete() {\n    const scrollEl = this.scrollEl;\n    if (!this.isLoading || !scrollEl) {\n      return;\n    }\n    this.isLoading = false;\n    if (this.position === 'top') {\n      /**\n       * New content is being added at the top, but the scrollTop position stays the same,\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n       * (Frame 1)\n       *    - complete() is called, but the UI hasn't had time to update yet.\n       *    - Save the current content dimensions.\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\n       * (Frame 2)\n       *    - Read the new content dimensions.\n       *    - Calculate the height difference and the new scroll position.\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n       * (Still frame 2, if I'm correct)\n       *    - Change the scroll position (= visually maintain the scroll position).\n       *    - Change the state to re-enable the InfiniteScroll.\n       *    - This should be after changing the scroll position, or it could\n       *    cause the InfiniteScroll to be triggered again immediately.\n       * (Frame 3)\n       *    Done.\n       */\n      this.isBusy = true;\n      // ******** DOM READ ****************\n      // Save the current content dimensions before the UI updates\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n      // ******** DOM READ ****************\n      requestAnimationFrame(() => {\n        readTask(() => {\n          // UI has updated, save the new content dimensions\n          const scrollHeight = scrollEl.scrollHeight;\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n          const newScrollTop = scrollHeight - prev;\n          // ******** DOM WRITE ****************\n          requestAnimationFrame(() => {\n            writeTask(() => {\n              scrollEl.scrollTop = newScrollTop;\n              this.isBusy = false;\n            });\n          });\n        });\n      });\n    }\n  }\n  canStart() {\n    return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      }\n      else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return (h(Host, { class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled,\n      } }));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"threshold\": [\"thresholdChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n};\nInfiniteScroll.style = infiniteScrollCss;\n\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst InfiniteScrollContent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n  }\n  componentDidLoad() {\n    if (this.loadingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  }\n  renderLoadingText() {\n    const { customHTMLEnabled, loadingText } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(loadingText) });\n    }\n    return h(\"div\", { class: \"infinite-loading-text\" }, this.loadingText);\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        // Used internally for styling\n        [`infinite-scroll-content-${mode}`]: true,\n      } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText !== undefined && this.renderLoadingText())));\n  }\n};\nInfiniteScrollContent.style = {\n  ios: infiniteScrollContentIosCss,\n  md: infiniteScrollContentMdCss\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"]}