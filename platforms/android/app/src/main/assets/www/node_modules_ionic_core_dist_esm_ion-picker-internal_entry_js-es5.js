(function () {
  "use strict";

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }

  function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }

  function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }

  function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }

  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }

  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

  (self["webpackChunkcom_carmd_proscan2"] = self["webpackChunkcom_carmd_proscan2"] || []).push([["node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js"], {
    /***/
    57754:
    /*!************************************************************************!*\
      !*** ./node_modules/@ionic/core/dist/esm/ion-picker-internal.entry.js ***!
      \************************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ion_picker_internal": function ion_picker_internal() {
          return (
            /* binding */
            PickerInternal
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator */
      19369);
      /* harmony import */


      var _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./index-8e692445.js */
      91477);
      /* harmony import */


      var _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./helpers-3b390e48.js */
      83870);
      /*!
       * (C) Ionic http://ionicframework.com - MIT License
       */


      var pickerInternalIosCss = ":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;-webkit-transform:translateZ(0);transform:translateZ(0);z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host ::slotted(ion-picker-column-internal:only-child){text-align:center}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-highlight{background:var(--ion-color-step-150, #eeeeef)}";
      var pickerInternalMdCss = ":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;-webkit-transform:translateZ(0);transform:translateZ(0);z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host ::slotted(ion-picker-column-internal:only-child){text-align:center}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 30%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}";

      var PickerInternal = /*#__PURE__*/function () {
        function PickerInternal(hostRef) {
          var _this2 = this;

          _classCallCheck(this, PickerInternal);

          (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
          this.ionInputModeChange = (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionInputModeChange", 7);
          this.useInputMode = false;

          this.isInHighlightBounds = function (ev) {
            var highlightEl = _this2.highlightEl;

            if (!highlightEl) {
              return false;
            }

            var bbox = highlightEl.getBoundingClientRect();
            /**
             * Check to see if the user clicked
             * outside the bounds of the highlight.
             */

            var outsideX = ev.clientX < bbox.left || ev.clientX > bbox.right;
            var outsideY = ev.clientY < bbox.top || ev.clientY > bbox.bottom;

            if (outsideX || outsideY) {
              return false;
            }

            return true;
          };
          /**
           * If we are no longer focused
           * on a picker column, then we should
           * exit input mode. An exception is made
           * for the input in the picker since having
           * that focused means we are still in input mode.
           */


          this.onFocusOut = function (ev) {
            // TODO(FW-2832): type
            var relatedTarget = ev.relatedTarget;

            if (!relatedTarget || relatedTarget.tagName !== 'ION-PICKER-COLUMN-INTERNAL' && relatedTarget !== _this2.inputEl) {
              _this2.exitInputMode();
            }
          };
          /**
           * When picker columns receive focus
           * the parent picker needs to determine
           * whether to enter/exit input mode.
           */


          this.onFocusIn = function (ev) {
            // TODO(FW-2832): type
            var target = ev.target;
            /**
             * Due to browser differences in how/when focus
             * is dispatched on certain elements, we need to
             * make sure that this function only ever runs when
             * focusing a picker column.
             */

            if (target.tagName !== 'ION-PICKER-COLUMN-INTERNAL') {
              return;
            }
            /**
             * If we have actionOnClick
             * then this means the user focused
             * a picker column via mouse or
             * touch (i.e. a PointerEvent). As a result,
             * we should not enter/exit input mode
             * until the click event has fired, which happens
             * after the `focusin` event.
             *
             * Otherwise, the user likely focused
             * the column using their keyboard and
             * we should enter/exit input mode automatically.
             */


            if (!_this2.actionOnClick) {
              var columnEl = target;
              var allowInput = columnEl.numericInput;

              if (allowInput) {
                _this2.enterInputMode(columnEl, false);
              } else {
                _this2.exitInputMode();
              }
            }
          };
          /**
           * On click we need to run an actionOnClick
           * function that has been set in onPointerDown
           * so that we enter/exit input mode correctly.
           */


          this.onClick = function () {
            var actionOnClick = _this2.actionOnClick;

            if (actionOnClick) {
              actionOnClick();
              _this2.actionOnClick = undefined;
            }
          };
          /**
           * Clicking a column also focuses the column on
           * certain browsers, so we use onPointerDown
           * to tell the onFocusIn function that users
           * are trying to click the column rather than
           * focus the column using the keyboard. When the
           * user completes the click, the onClick function
           * runs and runs the actionOnClick callback.
           */


          this.onPointerDown = function (ev) {
            var useInputMode = _this2.useInputMode,
                inputModeColumn = _this2.inputModeColumn,
                el = _this2.el;

            if (_this2.isInHighlightBounds(ev)) {
              /**
               * If we were already in
               * input mode, then we should determine
               * if we tapped a particular column and
               * should switch to input mode for
               * that specific column.
               */
              if (useInputMode) {
                /**
                 * If we tapped a picker column
                 * then we should either switch to input
                 * mode for that column or all columns.
                 * Otherwise we should exit input mode
                 * since we just tapped the highlight and
                 * not a column.
                 */
                if (ev.target.tagName === 'ION-PICKER-COLUMN-INTERNAL') {
                  /**
                   * If user taps 2 different columns
                   * then we should just switch to input mode
                   * for the new column rather than switching to
                   * input mode for all columns.
                   */
                  if (inputModeColumn && inputModeColumn === ev.target) {
                    _this2.actionOnClick = function () {
                      _this2.enterInputMode();
                    };
                  } else {
                    _this2.actionOnClick = function () {
                      _this2.enterInputMode(ev.target);
                    };
                  }
                } else {
                  _this2.actionOnClick = function () {
                    _this2.exitInputMode();
                  };
                }
                /**
                 * If we were not already in
                 * input mode, then we should
                 * enter input mode for all columns.
                 */

              } else {
                /**
                 * If there is only 1 numeric input column
                 * then we should skip multi column input.
                 */
                var columns = el.querySelectorAll('ion-picker-column-internal.picker-column-numeric-input');
                var columnEl = columns.length === 1 ? ev.target : undefined;

                _this2.actionOnClick = function () {
                  _this2.enterInputMode(columnEl);
                };
              }

              return;
            }

            _this2.actionOnClick = function () {
              _this2.exitInputMode();
            };
          };
          /**
           * Enters input mode to allow
           * for text entry of numeric values.
           * If on mobile, we focus a hidden input
           * field so that the on screen keyboard
           * is brought up. When tabbing using a
           * keyboard, picker columns receive an outline
           * to indicate they are focused. As a result,
           * we should not focus the hidden input as it
           * would cause the outline to go away, preventing
           * users from having any visual indication of which
           * column is focused.
           */


          this.enterInputMode = function (columnEl) {
            var focusInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var inputEl = _this2.inputEl,
                el = _this2.el;

            if (!inputEl) {
              return;
            }
            /**
             * Only active input mode if there is at
             * least one column that accepts numeric input.
             */


            var hasInputColumn = el.querySelector('ion-picker-column-internal.picker-column-numeric-input');

            if (!hasInputColumn) {
              return;
            }
            /**
             * If columnEl is undefined then
             * it is assumed that all numeric pickers
             * are eligible for text entry.
             * (i.e. hour and minute columns)
             */


            _this2.useInputMode = true;
            _this2.inputModeColumn = columnEl;
            /**
             * Users with a keyboard and mouse can
             * activate input mode where the input is
             * focused as well as when it is not focused,
             * so we need to make sure we clean up any
             * old listeners.
             */

            if (focusInput) {
              if (_this2.destroyKeypressListener) {
                _this2.destroyKeypressListener();

                _this2.destroyKeypressListener = undefined;
              }

              inputEl.focus();
            } else {
              el.addEventListener('keypress', _this2.onKeyPress);

              _this2.destroyKeypressListener = function () {
                el.removeEventListener('keypress', _this2.onKeyPress);
              };
            }

            _this2.emitInputModeChange();
          };

          this.onKeyPress = function (ev) {
            var inputEl = _this2.inputEl;

            if (!inputEl) {
              return;
            }

            var parsedValue = parseInt(ev.key, 10);
            /**
             * Only numbers should be allowed
             */

            if (!Number.isNaN(parsedValue)) {
              inputEl.value += ev.key;

              _this2.onInputChange();
            }
          };

          this.selectSingleColumn = function () {
            var inputEl = _this2.inputEl,
                inputModeColumn = _this2.inputModeColumn,
                singleColumnSearchTimeout = _this2.singleColumnSearchTimeout;

            if (!inputEl || !inputModeColumn) {
              return;
            }

            var values = inputModeColumn.items.filter(function (item) {
              return item.disabled !== true;
            });
            /**
             * If users pause for a bit, the search
             * value should be reset similar to how a
             * <select> behaves. So typing "34", waiting,
             * then typing "5" should select "05".
             */

            if (singleColumnSearchTimeout) {
              clearTimeout(singleColumnSearchTimeout);
            }

            _this2.singleColumnSearchTimeout = setTimeout(function () {
              inputEl.value = '';
              _this2.singleColumnSearchTimeout = undefined;
            }, 1000);
            /**
             * For values that are longer than 2 digits long
             * we should shift the value over 1 character
             * to the left. So typing "456" would result in "56".
             * TODO: If we want to support more than just
             * time entry, we should update this value to be
             * the max length of all of the picker items.
             */

            if (inputEl.value.length >= 3) {
              var startIndex = inputEl.value.length - 2;
              var newString = inputEl.value.substring(startIndex);
              inputEl.value = newString;

              _this2.selectSingleColumn();

              return;
            }
            /**
             * Checking the value of the input gets priority
             * first. For example, if the value of the input
             * is "1" and we entered "2", then the complete value
             * is "12" and we should select hour 12.
             *
             * Regex removes any leading zeros from values like "02",
             * but it keeps a single zero if there are only zeros in the string.
             * 0+(?=[1-9]) --> Match 1 or more zeros that are followed by 1-9
             * 0+(?=0$) --> Match 1 or more zeros that must be followed by one 0 and end.
             */


            var findItemFromCompleteValue = values.find(function (_ref) {
              var text = _ref.text;
              var parsedText = text.replace(/^0+(?=[1-9])|0+(?=0$)/, '');
              return parsedText === inputEl.value;
            });

            if (findItemFromCompleteValue) {
              inputModeColumn.setValue(findItemFromCompleteValue.value);
              return;
            }
            /**
             * If we typed "56" to get minute 56, then typed "7",
             * we should select "07" as "567" is not a valid minute.
             */


            if (inputEl.value.length === 2) {
              var changedCharacter = inputEl.value.substring(inputEl.value.length - 1);
              inputEl.value = changedCharacter;

              _this2.selectSingleColumn();
            }
          };
          /**
           * Searches a list of column items for a particular
           * value. This is currently used for numeric values.
           * The zeroBehavior can be set to account for leading
           * or trailing zeros when looking at the item text.
           */


          this.searchColumn = function (colEl, value) {
            var zeroBehavior = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'start';
            var behavior = zeroBehavior === 'start' ? /^0+/ : /0$/;
            var item = colEl.items.find(function (_ref2) {
              var text = _ref2.text,
                  disabled = _ref2.disabled;
              return disabled !== true && text.replace(behavior, '') === value;
            });

            if (item) {
              colEl.setValue(item.value);
            }
          };

          this.selectMultiColumn = function () {
            var inputEl = _this2.inputEl,
                el = _this2.el;

            if (!inputEl) {
              return;
            }

            var numericPickers = Array.from(el.querySelectorAll('ion-picker-column-internal')).filter(function (col) {
              return col.numericInput;
            });
            var firstColumn = numericPickers[0];
            var lastColumn = numericPickers[1];
            var value = inputEl.value;
            var minuteValue;

            switch (value.length) {
              case 1:
                _this2.searchColumn(firstColumn, value);

                break;

              case 2:
                /**
                 * If the first character is `0` or `1` it is
                 * possible that users are trying to type `09`
                 * or `11` into the hour field, so we should look
                 * at that first.
                 */
                var firstCharacter = inputEl.value.substring(0, 1);
                value = firstCharacter === '0' || firstCharacter === '1' ? inputEl.value : firstCharacter;

                _this2.searchColumn(firstColumn, value);
                /**
                 * If only checked the first value,
                 * we can check the second value
                 * for a match in the minutes column
                 */


                if (value.length === 1) {
                  minuteValue = inputEl.value.substring(inputEl.value.length - 1);

                  _this2.searchColumn(lastColumn, minuteValue, 'end');
                }

                break;

              case 3:
                /**
                 * If the first character is `0` or `1` it is
                 * possible that users are trying to type `09`
                 * or `11` into the hour field, so we should look
                 * at that first.
                 */
                var firstCharacterAgain = inputEl.value.substring(0, 1);
                value = firstCharacterAgain === '0' || firstCharacterAgain === '1' ? inputEl.value.substring(0, 2) : firstCharacterAgain;

                _this2.searchColumn(firstColumn, value);
                /**
                 * If only checked the first value,
                 * we can check the second value
                 * for a match in the minutes column
                 */


                minuteValue = value.length === 1 ? inputEl.value.substring(1) : inputEl.value.substring(2);

                _this2.searchColumn(lastColumn, minuteValue, 'end');

                break;

              case 4:
                /**
                 * If the first character is `0` or `1` it is
                 * possible that users are trying to type `09`
                 * or `11` into the hour field, so we should look
                 * at that first.
                 */
                var firstCharacterAgainAgain = inputEl.value.substring(0, 1);
                value = firstCharacterAgainAgain === '0' || firstCharacterAgainAgain === '1' ? inputEl.value.substring(0, 2) : firstCharacterAgainAgain;

                _this2.searchColumn(firstColumn, value);
                /**
                 * If only checked the first value,
                 * we can check the second value
                 * for a match in the minutes column
                 */


                var minuteValueAgain = value.length === 1 ? inputEl.value.substring(1, inputEl.value.length) : inputEl.value.substring(2, inputEl.value.length);

                _this2.searchColumn(lastColumn, minuteValueAgain, 'end');

                break;

              default:
                var startIndex = inputEl.value.length - 4;
                var newString = inputEl.value.substring(startIndex);
                inputEl.value = newString;

                _this2.selectMultiColumn();

                break;
            }
          };
          /**
           * Searches the value of the active column
           * to determine which value users are trying
           * to select
           */


          this.onInputChange = function () {
            var useInputMode = _this2.useInputMode,
                inputEl = _this2.inputEl,
                inputModeColumn = _this2.inputModeColumn;

            if (!useInputMode || !inputEl) {
              return;
            }

            if (inputModeColumn) {
              _this2.selectSingleColumn();
            } else {
              _this2.selectMultiColumn();
            }
          };
          /**
           * Emit ionInputModeChange. Picker columns
           * listen for this event to determine whether
           * or not their column is "active" for text input.
           */


          this.emitInputModeChange = function () {
            var useInputMode = _this2.useInputMode,
                inputModeColumn = _this2.inputModeColumn;

            _this2.ionInputModeChange.emit({
              useInputMode: useInputMode,
              inputModeColumn: inputModeColumn
            });
          };
        }
        /**
         * When the picker is interacted with
         * we need to prevent touchstart so other
         * gestures do not fire. For example,
         * scrolling on the wheel picker
         * in ion-datetime should not cause
         * a card modal to swipe to close.
         */


        return _createClass(PickerInternal, [{
          key: "preventTouchStartPropagation",
          value: function preventTouchStartPropagation(ev) {
            ev.stopPropagation();
          }
        }, {
          key: "componentWillLoad",
          value: function componentWillLoad() {
            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el).addEventListener('focusin', this.onFocusIn);
            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el).addEventListener('focusout', this.onFocusOut);
          }
          /**
           * @internal
           * Exits text entry mode for the picker
           * This method blurs the hidden input
           * and cause the keyboard to dismiss.
           */

        }, {
          key: "exitInputMode",
          value: function exitInputMode() {
            var _this = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              var inputEl, useInputMode;
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    inputEl = _this.inputEl, useInputMode = _this.useInputMode;

                    if (!(!useInputMode || !inputEl)) {
                      _context.next = 3;
                      break;
                    }

                    return _context.abrupt("return");

                  case 3:
                    _this.useInputMode = false;
                    _this.inputModeColumn = undefined;
                    inputEl.blur();
                    inputEl.value = '';

                    if (_this.destroyKeypressListener) {
                      _this.destroyKeypressListener();

                      _this.destroyKeypressListener = undefined;
                    }

                    _this.emitInputModeChange();

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }))();
          }
        }, {
          key: "render",
          value: function render() {
            var _this3 = this;

            return (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.H, {
              onPointerDown: function onPointerDown(ev) {
                return _this3.onPointerDown(ev);
              },
              onClick: function onClick() {
                return _this3.onClick();
              }
            }, (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("input", {
              "aria-hidden": "true",
              tabindex: -1,
              inputmode: "numeric",
              type: "number",
              ref: function ref(el) {
                return _this3.inputEl = el;
              },
              onInput: function onInput() {
                return _this3.onInputChange();
              },
              onBlur: function onBlur() {
                return _this3.exitInputMode();
              }
            }), (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
              "class": "picker-before"
            }), (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
              "class": "picker-after"
            }), (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
              "class": "picker-highlight",
              ref: function ref(el) {
                return _this3.highlightEl = el;
              }
            }), (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
          }
        }, {
          key: "el",
          get: function get() {
            return (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
          }
        }]);
      }();

      PickerInternal.style = {
        ios: pickerInternalIosCss,
        md: pickerInternalMdCss
      };
      /***/
    }
  }]);
})();
//# sourceMappingURL=node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js-es5.js.map