{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs';\r\n/**\r\n * @name Bluetooth Serial\r\n * @description This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino (not Android to Android or iOS to iOS).\r\n * @usage\r\n * ```typescript\r\n * import { BluetoothSerial } from '@ionic-native/bluetooth-serial/ngx';\r\n *\r\n * constructor(private bluetoothSerial: BluetoothSerial) { }\r\n *\r\n *\r\n * // Write a string\r\n * this.bluetoothSerial.write('hello world').then(success, failure);\r\n *\r\n * // Array of int or bytes\r\n * this.bluetoothSerial.write([186, 220, 222]).then(success, failure);\r\n *\r\n * // Typed Array\r\n * var data = new Uint8Array(4);\r\n * data[0] = 0x41;\r\n * data[1] = 0x42;\r\n * data[2] = 0x43;\r\n * data[3] = 0x44;\r\n * this.bluetoothSerial.write(data).then(success, failure);\r\n *\r\n * // Array Buffer\r\n * this.bluetoothSerial.write(data.buffer).then(success, failure);\r\n * ```\r\n */\r\nexport declare class BluetoothSerial extends IonicNativePlugin {\r\n    /**\r\n     * Connect to a Bluetooth device\r\n     * @param {string} macAddress_or_uuid Identifier of the remote device\r\n     * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\r\n     */\r\n    connect(macAddress_or_uuid: string): Observable<any>;\r\n    /**\r\n     * Connect insecurely to a Bluetooth device\r\n     * @param {string} macAddress Identifier of the remote device\r\n     * @returns {Observable<any>} Subscribe to connect, unsubscribe to disconnect.\r\n     */\r\n    connectInsecure(macAddress: string): Observable<any>;\r\n    /**\r\n     * Disconnect from the connected device\r\n     * @returns {Promise<any>}\r\n     */\r\n    disconnect(): Promise<any>;\r\n    /**\r\n     * Writes data to the serial port\r\n     * @param {any} data ArrayBuffer of data\r\n     * @returns {Promise<any>} returns a promise when data has been written\r\n     */\r\n    write(data: any): Promise<any>;\r\n    /**\r\n     * Gets the number of bytes of data available\r\n     * @returns {Promise<any>} returns a promise that contains the available bytes\r\n     */\r\n    available(): Promise<any>;\r\n    /**\r\n     * Reads data from the buffer\r\n     * @returns {Promise<any>} returns a promise with data from the buffer\r\n     */\r\n    read(): Promise<any>;\r\n    /**\r\n     * Reads data from the buffer until it reaches a delimiter\r\n     * @param {string} delimiter string that you want to search until\r\n     * @returns {Promise<any>} returns a promise\r\n     */\r\n    readUntil(delimiter: string): Promise<any>;\r\n    /**\r\n     * Subscribe to be notified when data is received\r\n     * @param {string} delimiter the string you want to watch for\r\n     * @returns {Observable<any>} returns an observable.\r\n     */\r\n    subscribe(delimiter: string): Observable<any>;\r\n    /**\r\n     * Subscribe to be notified when data is received\r\n     * @returns {Observable<any>} returns an observable\r\n     */\r\n    subscribeRawData(): Observable<any>;\r\n    /**\r\n     * Clears data in buffer\r\n     * @returns {Promise<any>} returns a promise when completed\r\n     */\r\n    clear(): Promise<any>;\r\n    /**\r\n     * Lists bonded devices\r\n     * @returns {Promise<any>} returns a promise\r\n     */\r\n    list(): Promise<any>;\r\n    /**\r\n     * Reports if bluetooth is enabled\r\n     * @returns {Promise<any>} returns a promise\r\n     */\r\n    isEnabled(): Promise<any>;\r\n    /**\r\n     * Reports the connection status\r\n     * @returns {Promise<any>} returns a promise\r\n     */\r\n    isConnected(): Promise<any>;\r\n    /**\r\n     * Reads the RSSI from the connected peripheral\r\n     * @returns {Promise<any>} returns a promise\r\n     */\r\n    readRSSI(): Promise<any>;\r\n    /**\r\n     * Show the Bluetooth settings on the device\r\n     * @returns {Promise<any>} returns a promise\r\n     */\r\n    showBluetoothSettings(): Promise<any>;\r\n    /**\r\n     * Enable Bluetooth on the device\r\n     * @returns {Promise<any>} returns a promise\r\n     */\r\n    enable(): Promise<any>;\r\n    /**\r\n     * Disable Bluetooth on the device\r\n     * @returns {Promise<any>} returns a promise\r\n     */\r\n    disable(): Promise<any>;\r\n    /**\r\n     * Discover unpaired devices\r\n     * @returns {Promise<any>} returns a promise\r\n     */\r\n    discoverUnpaired(): Promise<any>;\r\n    /**\r\n     * Subscribe to be notified on Bluetooth device discovery. Discovery process must be initiated with the `discoverUnpaired` function.\r\n     * @returns {Observable<any>} Returns an observable\r\n     */\r\n    setDeviceDiscoveredListener(): Observable<any>;\r\n    /**\r\n     * Sets the human readable device name that is broadcasted to other devices\r\n     * @param {string} newName Desired name of device\r\n     */\r\n    setName(newName: string): void;\r\n    /**\r\n     * Makes the device discoverable by other devices\r\n     * @param {number} discoverableDuration Desired number of seconds device should be discoverable for\r\n     */\r\n    setDiscoverable(discoverableDuration: number): void;\r\n}\r\n"]}