(function () {
  "use strict";

  function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }

  function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }

  function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }

  function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }

  function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }

  function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }

  function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }

  function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

  (self["webpackChunkcom_carmd_proscan2"] = self["webpackChunkcom_carmd_proscan2"] || []).push([["node_modules_ionic_core_dist_esm_ion-nav_2_entry_js"], {
    /***/
    16735:
    /*!**************************************************************!*\
      !*** ./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js ***!
      \**************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ion_nav": function ion_nav() {
          return (
            /* binding */
            Nav
          );
        },

        /* harmony export */
        "ion_nav_link": function ion_nav_link() {
          return (
            /* binding */
            NavLink
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator */
      19369);
      /* harmony import */


      var _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./index-8e692445.js */
      91477);
      /* harmony import */


      var _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./ionic-global-c74e4951.js */
      45460);
      /* harmony import */


      var _cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./cubic-bezier-e78d1307.js */
      62811);
      /* harmony import */


      var _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./helpers-3b390e48.js */
      83870);
      /* harmony import */


      var _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./index-27c7e5c4.js */
      20498);
      /* harmony import */


      var _framework_delegate_c3305a28_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./framework-delegate-c3305a28.js */
      64656);
      /*!
       * (C) Ionic http://ionicframework.com - MIT License
       */


      var VIEW_STATE_NEW = 1;
      var VIEW_STATE_ATTACHED = 2;
      var VIEW_STATE_DESTROYED = 3; // TODO(FW-2832): types

      var ViewController = /*#__PURE__*/function () {
        function ViewController(component, params) {
          _classCallCheck(this, ViewController);

          this.component = component;
          this.params = params;
          this.state = VIEW_STATE_NEW;
        }

        return _createClass(ViewController, [{
          key: "init",
          value: function init(container) {
            var _this = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              var component;
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    _this.state = VIEW_STATE_ATTACHED;

                    if (_this.element) {
                      _context.next = 6;
                      break;
                    }

                    component = _this.component;
                    _context.next = 5;
                    return (0, _framework_delegate_c3305a28_js__WEBPACK_IMPORTED_MODULE_6__.a)(_this.delegate, container, component, ['ion-page', 'ion-page-invisible'], _this.params);

                  case 5:
                    _this.element = _context.sent;

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }))();
          }
          /**
           * DOM WRITE
           */

        }, {
          key: "_destroy",
          value: function _destroy() {
            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');
            var element = this.element;

            if (element) {
              if (this.delegate) {
                this.delegate.removeViewFromDom(element.parentElement, element);
              } else {
                element.remove();
              }
            }

            this.nav = undefined;
            this.state = VIEW_STATE_DESTROYED;
          }
        }]);
      }();

      var matches = function matches(view, id, params) {
        if (!view) {
          return false;
        }

        if (view.component !== id) {
          return false;
        }

        return (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.s)(view.params, params);
      };

      var convertToView = function convertToView(page, params) {
        if (!page) {
          return null;
        }

        if (page instanceof ViewController) {
          return page;
        }

        return new ViewController(page, params);
      };

      var convertToViews = function convertToViews(pages) {
        return pages.map(function (page) {
          if (page instanceof ViewController) {
            return page;
          }

          if ('component' in page) {
            return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);
          }

          return convertToView(page, undefined);
        }).filter(function (v) {
          return v !== null;
        });
      };

      var navCss = ":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}";

      var Nav = /*#__PURE__*/function () {
        function Nav(hostRef) {
          _classCallCheck(this, Nav);

          (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
          this.ionNavWillLoad = (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionNavWillLoad", 7);
          this.ionNavWillChange = (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionNavWillChange", 3);
          this.ionNavDidChange = (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionNavDidChange", 3);
          this.transInstr = [];
          this.animationEnabled = true;
          this.useRouter = false;
          this.isTransitioning = false;
          this.destroyed = false;
          this.views = [];
          /**
           * If `true`, the nav should animate the transition of components.
           */

          this.animated = true;
        }

        return _createClass(Nav, [{
          key: "swipeGestureChanged",
          value: function swipeGestureChanged() {
            if (this.gesture) {
              this.gesture.enable(this.swipeGesture === true);
            }
          }
        }, {
          key: "rootChanged",
          value: function rootChanged() {
            if (this.root !== undefined) {
              if (!this.useRouter) {
                this.setRoot(this.root, this.rootParams);
              }
            }
          }
        }, {
          key: "componentWillLoad",
          value: function componentWillLoad() {
            this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;

            if (this.swipeGesture === undefined) {
              var mode = (0, _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
              this.swipeGesture = _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('swipeBackEnabled', mode === 'ios');
            }

            this.ionNavWillLoad.emit();
          }
        }, {
          key: "componentDidLoad",
          value: function componentDidLoad() {
            var _this2 = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    _this2.rootChanged();

                    _context2.next = 3;
                    return __webpack_require__.e(
                    /*! import() */
                    "common").then(__webpack_require__.bind(__webpack_require__,
                    /*! ./swipe-back-e35bd7d6.js */
                    72978));

                  case 3:
                    _this2.gesture = _context2.sent.createSwipeBackGesture(_this2.el, _this2.canStart.bind(_this2), _this2.onStart.bind(_this2), _this2.onMove.bind(_this2), _this2.onEnd.bind(_this2));

                    _this2.swipeGestureChanged();

                  case 5:
                  case "end":
                    return _context2.stop();
                }
              }, _callee2);
            }))();
          }
        }, {
          key: "connectedCallback",
          value: function connectedCallback() {
            this.destroyed = false;
          }
        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            var _iterator = _createForOfIteratorHelper(this.views),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var view = _step.value;
                (0, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.l)(view.element, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.d);

                view._destroy();
              } // Release swipe back gesture and transition.

            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            if (this.gesture) {
              this.gesture.destroy();
              this.gesture = undefined;
            }

            this.transInstr.length = 0;
            this.views.length = 0;
            this.destroyed = true;
          }
          /**
           * Push a new component onto the current navigation stack. Pass any additional
           * information along as an object. This additional information is accessible
           * through NavParams.
           *
           * @param component The component to push onto the navigation stack.
           * @param componentProps Any properties of the component.
           * @param opts The navigation options.
           * @param done The transition complete function.
           */

        }, {
          key: "push",
          value: function push(component, componentProps, opts, done) {
            return this.insert(-1, component, componentProps, opts, done);
          }
          /**
           * Inserts a component into the navigation stack at the specified index.
           * This is useful to add a component at any point in the navigation stack.
           *
           * @param insertIndex The index to insert the component at in the stack.
           * @param component The component to insert into the navigation stack.
           * @param componentProps Any properties of the component.
           * @param opts The navigation options.
           * @param done The transition complete function.
           */

        }, {
          key: "insert",
          value: function insert(insertIndex, component, componentProps, opts, done) {
            return this.insertPages(insertIndex, [{
              component: component,
              componentProps: componentProps
            }], opts, done);
          }
          /**
           * Inserts an array of components into the navigation stack at the specified index.
           * The last component in the array will become instantiated as a view, and animate
           * in to become the active view.
           *
           * @param insertIndex The index to insert the components at in the stack.
           * @param insertComponents The components to insert into the navigation stack.
           * @param opts The navigation options.
           * @param done The transition complete function.
           */

        }, {
          key: "insertPages",
          value: function insertPages(insertIndex, insertComponents, opts, done) {
            return this.queueTrns({
              insertStart: insertIndex,
              insertViews: insertComponents,
              opts: opts
            }, done);
          }
          /**
           * Pop a component off of the navigation stack. Navigates back from the current
           * component.
           *
           * @param opts The navigation options.
           * @param done The transition complete function.
           */

        }, {
          key: "pop",
          value: function pop(opts, done) {
            return this.removeIndex(-1, 1, opts, done);
          }
          /**
           * Pop to a specific index in the navigation stack.
           *
           * @param indexOrViewCtrl The index or view controller to pop to.
           * @param opts The navigation options.
           * @param done The transition complete function.
           */

        }, {
          key: "popTo",
          value: function popTo(indexOrViewCtrl, opts, done) {
            var ti = {
              removeStart: -1,
              removeCount: -1,
              opts: opts
            };

            if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {
              ti.removeView = indexOrViewCtrl;
              ti.removeStart = 1;
            } else if (typeof indexOrViewCtrl === 'number') {
              ti.removeStart = indexOrViewCtrl + 1;
            }

            return this.queueTrns(ti, done);
          }
          /**
           * Navigate back to the root of the stack, no matter how far back that is.
           *
           * @param opts The navigation options.
           * @param done The transition complete function.
           */

        }, {
          key: "popToRoot",
          value: function popToRoot(opts, done) {
            return this.removeIndex(1, -1, opts, done);
          }
          /**
           * Removes a component from the navigation stack at the specified index.
           *
           * @param startIndex The number to begin removal at.
           * @param removeCount The number of components to remove.
           * @param opts The navigation options.
           * @param done The transition complete function.
           */

        }, {
          key: "removeIndex",
          value: function removeIndex(startIndex) {
            var removeCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            var opts = arguments.length > 2 ? arguments[2] : undefined;
            var done = arguments.length > 3 ? arguments[3] : undefined;
            return this.queueTrns({
              removeStart: startIndex,
              removeCount: removeCount,
              opts: opts
            }, done);
          }
          /**
           * Set the root for the current navigation stack to a component.
           *
           * @param component The component to set as the root of the navigation stack.
           * @param componentProps Any properties of the component.
           * @param opts The navigation options.
           * @param done The transition complete function.
           */

        }, {
          key: "setRoot",
          value: function setRoot(component, componentProps, opts, done) {
            return this.setPages([{
              component: component,
              componentProps: componentProps
            }], opts, done);
          }
          /**
           * Set the views of the current navigation stack and navigate to the last view.
           * By default animations are disabled, but they can be enabled by passing options
           * to the navigation controller. Navigation parameters can also be passed to the
           * individual pages in the array.
           *
           * @param views The list of views to set as the navigation stack.
           * @param opts The navigation options.
           * @param done The transition complete function.
           */

        }, {
          key: "setPages",
          value: function setPages(views, opts, done) {
            opts !== null && opts !== void 0 ? opts : opts = {}; // if animation wasn't set to true then default it to NOT animate

            if (opts.animated !== true) {
              opts.animated = false;
            }

            return this.queueTrns({
              insertStart: 0,
              insertViews: views,
              removeStart: 0,
              removeCount: -1,
              opts: opts
            }, done);
          }
          /**
           * Called by the router to update the view.
           *
           * @param id The component tag.
           * @param params The component params.
           * @param direction A direction hint.
           * @param animation an AnimationBuilder.
           *
           * @return the status.
           * @internal
           */

        }, {
          key: "setRouteId",
          value: function setRouteId(id, params, direction, animation) {
            var active = this.getActiveSync();

            if (matches(active, id, params)) {
              return Promise.resolve({
                changed: false,
                element: active.element
              });
            }

            var resolve;
            var promise = new Promise(function (r) {
              return resolve = r;
            });
            var finish;
            var commonOpts = {
              updateURL: false,
              viewIsReady: function viewIsReady(enteringEl) {
                var mark;
                var p = new Promise(function (r) {
                  return mark = r;
                });
                resolve({
                  changed: true,
                  element: enteringEl,
                  markVisible: function () {
                    var _ref = (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                        while (1) switch (_context3.prev = _context3.next) {
                          case 0:
                            mark();
                            _context3.next = 3;
                            return finish;

                          case 3:
                          case "end":
                            return _context3.stop();
                        }
                      }, _callee3);
                    }));

                    return function markVisible() {
                      return _ref.apply(this, arguments);
                    };
                  }()
                });
                return p;
              }
            };

            if (direction === 'root') {
              finish = this.setRoot(id, params, commonOpts);
            } else {
              // Look for a view matching the target in the view stack.
              var viewController = this.views.find(function (v) {
                return matches(v, id, params);
              });

              if (viewController) {
                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {
                  direction: 'back',
                  animationBuilder: animation
                }));
              } else if (direction === 'forward') {
                finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {
                  animationBuilder: animation
                }));
              } else if (direction === 'back') {
                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {
                  direction: 'back',
                  animated: true,
                  animationBuilder: animation
                }));
              }
            }

            return promise;
          }
          /**
           * Called by <ion-router> to retrieve the current component.
           *
           * @internal
           */

        }, {
          key: "getRouteId",
          value: function getRouteId() {
            var _this3 = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
              var active;
              return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                while (1) switch (_context4.prev = _context4.next) {
                  case 0:
                    active = _this3.getActiveSync();

                    if (!active) {
                      _context4.next = 3;
                      break;
                    }

                    return _context4.abrupt("return", {
                      id: active.element.tagName,
                      params: active.params,
                      element: active.element
                    });

                  case 3:
                    return _context4.abrupt("return", undefined);

                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }, _callee4);
            }))();
          }
          /**
           * Get the active view.
           */

        }, {
          key: "getActive",
          value: function getActive() {
            var _this4 = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
              return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                while (1) switch (_context5.prev = _context5.next) {
                  case 0:
                    return _context5.abrupt("return", _this4.getActiveSync());

                  case 1:
                  case "end":
                    return _context5.stop();
                }
              }, _callee5);
            }))();
          }
          /**
           * Get the view at the specified index.
           *
           * @param index The index of the view.
           */

        }, {
          key: "getByIndex",
          value: function getByIndex(index) {
            var _this5 = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
              return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                while (1) switch (_context6.prev = _context6.next) {
                  case 0:
                    return _context6.abrupt("return", _this5.views[index]);

                  case 1:
                  case "end":
                    return _context6.stop();
                }
              }, _callee6);
            }))();
          }
          /**
           * Returns `true` if the current view can go back.
           *
           * @param view The view to check.
           */

        }, {
          key: "canGoBack",
          value: function canGoBack(view) {
            var _this6 = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
              return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                while (1) switch (_context7.prev = _context7.next) {
                  case 0:
                    return _context7.abrupt("return", _this6.canGoBackSync(view));

                  case 1:
                  case "end":
                    return _context7.stop();
                }
              }, _callee7);
            }))();
          }
          /**
           * Get the previous view.
           *
           * @param view The view to get.
           */

        }, {
          key: "getPrevious",
          value: function getPrevious(view) {
            var _this7 = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
              return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                while (1) switch (_context8.prev = _context8.next) {
                  case 0:
                    return _context8.abrupt("return", _this7.getPreviousSync(view));

                  case 1:
                  case "end":
                    return _context8.stop();
                }
              }, _callee8);
            }))();
          }
        }, {
          key: "getLength",
          value: function getLength() {
            return this.views.length;
          }
        }, {
          key: "getActiveSync",
          value: function getActiveSync() {
            return this.views[this.views.length - 1];
          }
        }, {
          key: "canGoBackSync",
          value: function canGoBackSync() {
            var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();
            return !!(view && this.getPreviousSync(view));
          }
        }, {
          key: "getPreviousSync",
          value: function getPreviousSync() {
            var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();

            if (!view) {
              return undefined;
            }

            var views = this.views;
            var index = views.indexOf(view);
            return index > 0 ? views[index - 1] : undefined;
          }
          /**
           * Adds a navigation stack change to the queue and schedules it to run.
           *
           * @returns Whether the transition succeeds.
           */

        }, {
          key: "queueTrns",
          value: function queueTrns(ti, done) {
            var _this8 = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
              var _a, _b, promise, router, canTransition;

              return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                while (1) switch (_context9.prev = _context9.next) {
                  case 0:
                    if (!(_this8.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy))) {
                      _context9.next = 2;
                      break;
                    }

                    return _context9.abrupt("return", false);

                  case 2:
                    promise = new Promise(function (resolve, reject) {
                      ti.resolve = resolve;
                      ti.reject = reject;
                    });
                    ti.done = done;
                    /**
                     * If using router, check to see if navigation hooks
                     * will allow us to perform this transition. This
                     * is required in order for hooks to work with
                     * the ion-back-button or swipe to go back.
                     */

                    if (!(ti.opts && ti.opts.updateURL !== false && _this8.useRouter)) {
                      _context9.next = 15;
                      break;
                    }

                    router = document.querySelector('ion-router');

                    if (!router) {
                      _context9.next = 15;
                      break;
                    }

                    _context9.next = 9;
                    return router.canTransition();

                  case 9:
                    canTransition = _context9.sent;

                    if (!(canTransition === false)) {
                      _context9.next = 12;
                      break;
                    }

                    return _context9.abrupt("return", false);

                  case 12:
                    if (!(typeof canTransition === 'string')) {
                      _context9.next = 15;
                      break;
                    }

                    router.push(canTransition, ti.opts.direction || 'back');
                    return _context9.abrupt("return", false);

                  case 15:
                    // Normalize empty
                    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {
                      ti.insertViews = undefined;
                    } // Enqueue transition instruction


                    _this8.transInstr.push(ti); // if there isn't a transition already happening
                    // then this will kick off this transition


                    _this8.nextTrns();

                    return _context9.abrupt("return", promise);

                  case 19:
                  case "end":
                    return _context9.stop();
                }
              }, _callee9);
            }))();
          }
        }, {
          key: "success",
          value: function success(result, ti) {
            if (this.destroyed) {
              this.fireError('nav controller was destroyed', ti);
              return;
            }

            if (ti.done) {
              ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);
            }

            ti.resolve(result.hasCompleted);

            if (ti.opts.updateURL !== false && this.useRouter) {
              var router = document.querySelector('ion-router');

              if (router) {
                var direction = result.direction === 'back' ? 'back' : 'forward';
                router.navChanged(direction);
              }
            }
          }
        }, {
          key: "failed",
          value: function failed(rejectReason, ti) {
            if (this.destroyed) {
              this.fireError('nav controller was destroyed', ti);
              return;
            }

            this.transInstr.length = 0;
            this.fireError(rejectReason, ti);
          }
        }, {
          key: "fireError",
          value: function fireError(rejectReason, ti) {
            if (ti.done) {
              ti.done(false, false, rejectReason);
            }

            if (ti.reject && !this.destroyed) {
              ti.reject(rejectReason);
            } else {
              ti.resolve(false);
            }
          }
          /**
           * Consumes the next transition in the queue.
           *
           * @returns whether the transition is executed.
           */

        }, {
          key: "nextTrns",
          value: function nextTrns() {
            // this is the framework's bread 'n butta function
            // only one transition is allowed at any given time
            if (this.isTransitioning) {
              return false;
            } // there is no transition happening right now, executes the next instructions.


            var ti = this.transInstr.shift();

            if (!ti) {
              return false;
            }

            this.runTransition(ti);
            return true;
          }
          /** Executes all the transition instruction from the queue. */

        }, {
          key: "runTransition",
          value: function runTransition(ti) {
            var _this9 = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
              var leavingView, enteringView, requiresTransition, isBackDirection, result;
              return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                while (1) switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.prev = 0;

                    // set that this nav is actively transitioning
                    _this9.ionNavWillChange.emit();

                    _this9.isTransitioning = true;

                    _this9.prepareTI(ti);

                    leavingView = _this9.getActiveSync();
                    enteringView = _this9.getEnteringView(ti, leavingView);

                    if (!(!leavingView && !enteringView)) {
                      _context10.next = 8;
                      break;
                    }

                    throw new Error('no views in the stack to be removed');

                  case 8:
                    if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) {
                      _context10.next = 11;
                      break;
                    }

                    _context10.next = 11;
                    return enteringView.init(_this9.el);

                  case 11:
                    _this9.postViewInit(enteringView, leavingView, ti); // Needs transition?


                    requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;

                    if (requiresTransition && ti.opts && leavingView) {
                      isBackDirection = ti.opts.direction === 'back';
                      /**
                       * If heading back, use the entering page's animation
                       * unless otherwise specified by the developer.
                       */

                      if (isBackDirection) {
                        ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);
                      }

                      leavingView.animationBuilder = ti.opts.animationBuilder;
                    }

                    if (!requiresTransition) {
                      _context10.next = 20;
                      break;
                    }

                    _context10.next = 17;
                    return _this9.transition(enteringView, leavingView, ti);

                  case 17:
                    result = _context10.sent;
                    _context10.next = 21;
                    break;

                  case 20:
                    // transition is not required, so we are already done!
                    // they're inserting/removing the views somewhere in the middle or
                    // beginning, so visually nothing needs to animate/transition
                    // resolve immediately because there's no animation that's happening
                    result = {
                      hasCompleted: true,
                      requiresTransition: false
                    };

                  case 21:
                    _this9.success(result, ti);

                    _this9.ionNavDidChange.emit();

                    _context10.next = 28;
                    break;

                  case 25:
                    _context10.prev = 25;
                    _context10.t0 = _context10["catch"](0);

                    _this9.failed(_context10.t0, ti);

                  case 28:
                    _this9.isTransitioning = false;

                    _this9.nextTrns();

                  case 30:
                  case "end":
                    return _context10.stop();
                }
              }, _callee10, null, [[0, 25]]);
            }))();
          }
        }, {
          key: "prepareTI",
          value: function prepareTI(ti) {
            var _a, _b;

            var _c;

            var viewsLength = this.views.length;
            (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};
            (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;

            if (ti.removeView !== undefined) {
              (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(ti.removeStart !== undefined, 'removeView needs removeStart');
              (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(ti.removeCount !== undefined, 'removeView needs removeCount');
              var index = this.views.indexOf(ti.removeView);

              if (index < 0) {
                throw new Error('removeView was not found');
              }

              ti.removeStart += index;
            }

            if (ti.removeStart !== undefined) {
              if (ti.removeStart < 0) {
                ti.removeStart = viewsLength - 1;
              }

              if (ti.removeCount < 0) {
                ti.removeCount = viewsLength - ti.removeStart;
              }

              ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;
            }

            if (ti.insertViews) {
              // allow -1 to be passed in to auto push it on the end
              // and clean up the index if it's larger then the size of the stack
              if (ti.insertStart < 0 || ti.insertStart > viewsLength) {
                ti.insertStart = viewsLength;
              }

              ti.enteringRequiresTransition = ti.insertStart === viewsLength;
            }

            var insertViews = ti.insertViews;

            if (!insertViews) {
              return;
            }

            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(insertViews.length > 0, 'length can not be zero');
            var viewControllers = convertToViews(insertViews);

            if (viewControllers.length === 0) {
              throw new Error('invalid views to insert');
            } // Check all the inserted view are correct


            var _iterator2 = _createForOfIteratorHelper(viewControllers),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var view = _step2.value;
                view.delegate = ti.opts.delegate;
                var nav = view.nav;

                if (nav && nav !== this) {
                  throw new Error('inserted view was already inserted');
                }

                if (view.state === VIEW_STATE_DESTROYED) {
                  throw new Error('inserted view was already destroyed');
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            ti.insertViews = viewControllers;
          }
          /**
           * Returns the view that will be entered considering the transition instructions.
           *
           * @param ti The instructions.
           * @param leavingView The view being left or undefined if none.
           *
           * @returns The view that will be entered, undefined if none.
           */

        }, {
          key: "getEnteringView",
          value: function getEnteringView(ti, leavingView) {
            // The last inserted view will be entered when view are inserted.
            var insertViews = ti.insertViews;

            if (insertViews !== undefined) {
              return insertViews[insertViews.length - 1];
            } // When views are deleted, we will enter the last view that is not removed and not the view being left.


            var removeStart = ti.removeStart;

            if (removeStart !== undefined) {
              var views = this.views;
              var removeEnd = removeStart + ti.removeCount;

              for (var i = views.length - 1; i >= 0; i--) {
                var view = views[i];

                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {
                  return view;
                }
              }
            }

            return undefined;
          }
          /**
           * Adds and Removes the views from the navigation stack.
           *
           * @param enteringView The view being entered.
           * @param leavingView The view being left.
           * @param ti The instructions.
           */

        }, {
          key: "postViewInit",
          value: function postViewInit(enteringView, leavingView, ti) {
            var _a, _b, _c;

            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(leavingView || enteringView, 'Both leavingView and enteringView are null');
            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(ti.resolve, 'resolve must be valid');
            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(ti.reject, 'reject must be valid'); // Compute the views to remove.

            var opts = ti.opts;
            var insertViews = ti.insertViews,
                removeStart = ti.removeStart,
                removeCount = ti.removeCount;
            /** Records the view to destroy */

            var destroyQueue; // there are views to remove

            if (removeStart !== undefined && removeCount !== undefined) {
              (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(removeStart >= 0, 'removeStart can not be negative');
              (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(removeCount >= 0, 'removeCount can not be negative');
              destroyQueue = [];

              for (var i = removeStart; i < removeStart + removeCount; i++) {
                var view = this.views[i];

                if (view !== undefined && view !== enteringView && view !== leavingView) {
                  destroyQueue.push(view);
                }
              } // default the direction to "back"


              (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';
            }

            var finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);
            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(finalNumViews >= 0, 'final balance can not be negative');

            if (finalNumViews === 0) {
              console.warn("You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.", this, this.el);
              throw new Error('navigation stack needs at least one root page');
            } // At this point the transition can not be rejected, any throw should be an error
            // Insert the new views in the stack.


            if (insertViews) {
              // add the views to the
              var insertIndex = ti.insertStart;

              var _iterator3 = _createForOfIteratorHelper(insertViews),
                  _step3;

              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var _view = _step3.value;
                  this.insertViewAt(_view, insertIndex);
                  insertIndex++;
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }

              if (ti.enteringRequiresTransition) {
                // default to forward if not already set
                (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';
              }
            } // if the views to be removed are in the beginning or middle
            // and there is not a view that needs to visually transition out
            // then just destroy them and don't transition anything
            // batch all of lifecycles together
            // let's make sure, callbacks are zoned


            if (destroyQueue && destroyQueue.length > 0) {
              var _iterator4 = _createForOfIteratorHelper(destroyQueue),
                  _step4;

              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  var _view2 = _step4.value;
                  (0, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.l)(_view2.element, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.b);
                  (0, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.l)(_view2.element, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.c);
                  (0, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.l)(_view2.element, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.d);
                } // once all lifecycle events has been delivered, we can safely detroy the views

              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }

              var _iterator5 = _createForOfIteratorHelper(destroyQueue),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var _view3 = _step5.value;
                  this.destroyView(_view3);
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
            }
          }
        }, {
          key: "transition",
          value: function transition(enteringView, leavingView, ti) {
            var _this10 = this;

            return (0, _Users_tucarmd_DATA_PROJECTS_proscan_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
              var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, _yield, hasCompleted;

              return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                while (1) switch (_context11.prev = _context11.next) {
                  case 0:
                    // we should animate (duration > 0) if the pushed page is not the first one (startup)
                    // or if it is a portal (modal, actionsheet, etc.)
                    opts = ti.opts;
                    progressCallback = opts.progressAnimation ? function (ani) {
                      return _this10.sbAni = ani;
                    } : undefined;
                    mode = (0, _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this10);
                    enteringEl = enteringView.element;
                    leavingEl = leavingView && leavingView.element;
                    animationOpts = Object.assign(Object.assign({
                      mode: mode,
                      showGoBack: _this10.canGoBackSync(enteringView),
                      baseEl: _this10.el,
                      progressCallback: progressCallback,
                      animated: _this10.animated && _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('animated', true),
                      enteringEl: enteringEl,
                      leavingEl: leavingEl
                    }, opts), {
                      animationBuilder: opts.animationBuilder || _this10.animation || _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.c.get('navAnimation')
                    });
                    _context11.next = 8;
                    return (0, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.t)(animationOpts);

                  case 8:
                    _yield = _context11.sent;
                    hasCompleted = _yield.hasCompleted;
                    return _context11.abrupt("return", _this10.transitionFinish(hasCompleted, enteringView, leavingView, opts));

                  case 11:
                  case "end":
                    return _context11.stop();
                }
              }, _callee11);
            }))();
          }
        }, {
          key: "transitionFinish",
          value: function transitionFinish(hasCompleted, enteringView, leavingView, opts) {
            /**
             * If the transition did not complete, the leavingView will still be the active
             * view on the stack. Otherwise unmount all the views after the enteringView.
             */
            var activeView = hasCompleted ? enteringView : leavingView;

            if (activeView) {
              this.unmountInactiveViews(activeView);
            }

            return {
              hasCompleted: hasCompleted,
              requiresTransition: true,
              enteringView: enteringView,
              leavingView: leavingView,
              direction: opts.direction
            };
          }
          /**
           * Inserts a view at the specified index.
           *
           * When the view already is in the stack it will be moved to the new position.
           *
           * @param view The view to insert.
           * @param index The index where to insert the view.
           */

        }, {
          key: "insertViewAt",
          value: function insertViewAt(view, index) {
            var views = this.views;
            var existingIndex = views.indexOf(view);

            if (existingIndex > -1) {
              (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(view.nav === this, 'view is not part of the nav'); // The view already in the stack, removes it.

              views.splice(existingIndex, 1); // and add it back at the requested index.

              views.splice(index, 0, view);
            } else {
              (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(!view.nav, 'nav is used'); // this is a new view to add to the stack
              // create the new entering view

              view.nav = this;
              views.splice(index, 0, view);
            }
          }
          /**
           * Removes a view from the stack.
           *
           * @param view The view to remove.
           */

        }, {
          key: "removeView",
          value: function removeView(view) {
            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');
            var views = this.views;
            var index = views.indexOf(view);
            (0, _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_4__.n)(index > -1, 'view must be part of the stack');

            if (index >= 0) {
              views.splice(index, 1);
            }
          }
        }, {
          key: "destroyView",
          value: function destroyView(view) {
            view._destroy();

            this.removeView(view);
          }
          /**
           * Unmounts all inactive views after the specified active view.
           *
           * DOM WRITE
           *
           * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.
           */

        }, {
          key: "unmountInactiveViews",
          value: function unmountInactiveViews(activeView) {
            // ok, cleanup time!! Destroy all of the views that are
            // INACTIVE and come after the active view
            // only do this if the views exist, though
            if (this.destroyed) {
              return;
            }

            var views = this.views;
            var activeViewIndex = views.indexOf(activeView);

            for (var i = views.length - 1; i >= 0; i--) {
              var view = views[i];
              /**
               * When inserting multiple views via insertPages
               * the last page will be transitioned to, but the
               * others will not be. As a result, a DOM element
               * will only be created for the last page inserted.
               * As a result, it is possible to have views in the
               * stack that do not have `view.element` yet.
               */

              var element = view.element;

              if (element) {
                if (i > activeViewIndex) {
                  // this view comes after the active view
                  // let's unload it
                  (0, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.l)(element, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.d);
                  this.destroyView(view);
                } else if (i < activeViewIndex) {
                  // this view comes before the active view
                  // and it is not a portal then ensure it is hidden
                  (0, _index_27c7e5c4_js__WEBPACK_IMPORTED_MODULE_5__.s)(element, true);
                }
              }
            }
          }
        }, {
          key: "canStart",
          value: function canStart() {
            return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();
          }
        }, {
          key: "onStart",
          value: function onStart() {
            this.pop({
              direction: 'back',
              progressAnimation: true
            });
          }
        }, {
          key: "onMove",
          value: function onMove(stepValue) {
            if (this.sbAni) {
              this.sbAni.progressStep(stepValue);
            }
          }
        }, {
          key: "onEnd",
          value: function onEnd(shouldComplete, stepValue, dur) {
            var _this11 = this;

            if (this.sbAni) {
              this.animationEnabled = false;
              this.sbAni.onFinish(function () {
                _this11.animationEnabled = true;
              }, {
                oneTimeCallback: true
              }); // Account for rounding errors in JS

              var newStepValue = shouldComplete ? -0.001 : 0.001;
              /**
               * Animation will be reversed here, so need to
               * reverse the easing curve as well
               *
               * Additionally, we need to account for the time relative
               * to the new easing curve, as `stepValue` is going to be given
               * in terms of a linear curve.
               */

              if (!shouldComplete) {
                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');
                newStepValue += (0, _cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_3__.g)([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];
              } else {
                newStepValue += (0, _cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_3__.g)([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];
              }

              this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);
            }
          }
        }, {
          key: "render",
          value: function render() {
            return (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null);
          }
        }, {
          key: "el",
          get: function get() {
            return (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
          }
        }], [{
          key: "watchers",
          get: function get() {
            return {
              "swipeGesture": ["swipeGestureChanged"],
              "root": ["rootChanged"]
            };
          }
        }]);
      }();

      Nav.style = navCss;

      var navLink = function navLink(el, routerDirection, component, componentProps, routerAnimation) {
        var nav = el.closest('ion-nav');

        if (nav) {
          if (routerDirection === 'forward') {
            if (component !== undefined) {
              return nav.push(component, componentProps, {
                skipIfBusy: true,
                animationBuilder: routerAnimation
              });
            }
          } else if (routerDirection === 'root') {
            if (component !== undefined) {
              return nav.setRoot(component, componentProps, {
                skipIfBusy: true,
                animationBuilder: routerAnimation
              });
            }
          } else if (routerDirection === 'back') {
            return nav.pop({
              skipIfBusy: true,
              animationBuilder: routerAnimation
            });
          }
        }

        return Promise.resolve(false);
      };

      var NavLink = /*#__PURE__*/function () {
        function NavLink(hostRef) {
          var _this12 = this;

          _classCallCheck(this, NavLink);

          (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
          /**
           * The transition direction when navigating to another page.
           */

          this.routerDirection = 'forward';

          this.onClick = function () {
            return navLink(_this12.el, _this12.routerDirection, _this12.component, _this12.componentProps, _this12.routerAnimation);
          };
        }

        return _createClass(NavLink, [{
          key: "render",
          value: function render() {
            return (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.H, {
              onClick: this.onClick
            });
          }
        }, {
          key: "el",
          get: function get() {
            return (0, _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
          }
        }]);
      }();
      /***/

    }
  }]);
})();
//# sourceMappingURL=node_modules_ionic_core_dist_esm_ion-nav_2_entry_js-es5.js.map